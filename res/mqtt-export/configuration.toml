[Writable]
  LogLevel = "INFO"

  [Writable.StoreAndForward]
    Enabled = false
    RetryInterval = "5m"
    MaxRetryCount = 10

  [Writable.Pipeline]
    ExecutionOrder = "TransformToJSON, MQTTSecretSend, MarkAsPushed"

    [Writable.Pipeline.Functions.TransformToJSON]
    [Writable.Pipeline.Functions.MarkAsPushed]
    [Writable.Pipeline.Functions.FilterByDeviceName]
      [Writable.Pipeline.Functions.FilterByDeviceName.Parameters]
        DeviceNames = ""
        FilterOut = "false"
    [Writable.Pipeline.Functions.FilterByValueDescriptor]
      [Writable.Pipeline.Functions.FilterByValueDescriptor.Parameters]
        ValueDescriptors = ""
        FilterOut = "false"
    [Writable.Pipeline.Functions.MQTTSecretSend]
      [Writable.Pipeline.Functions.MQTTSecretSend.Parameters]
        brokeraddress = "tcps://localhost:8883"
        topic = "mytopic"
        secretpath = "mqtt"
        clientid = "myclientid"
        qos="0"
        autoreconnect="false"
        retain="false"
        skipverify = "false"
        authmode = "none"
        persistOnError = "false"
    [Writable.Pipeline.Functions.AddTags]
      [Writable.Pipeline.Functions.AddTags.Parameters]
        tags=""

# InsecureSecrets are required for Store and Forward DB access and for authenticated MQTT exports with
# new MQTTSecretSend function when not using security services, i.e. Vault
  [Writable.InsecureSecrets]
    [Writable.InsecureSecrets.DB]
        path = "redisdb"
        [Writable.InsecureSecrets.DB.Secrets]
            username = ""
            password = ""
    [Writable.InsecureSecrets.mqtt]
        path = "mqtt"
        [Writable.InsecureSecrets.mqtt.Secrets]
            username = ""
            password = ""
            cacert = ""
            clientcert = ""
            clientkey = ""

[Service]
BootTimeout = "30s"
CheckInterval = "10s"
Host = "localhost"
ServerBindAddr = "" # if blank, uses default Go behavior https://golang.org/pkg/net/#Listen
Port = 50002
Protocol = "http"
ReadMaxLimit = 100
StartupMsg = "AppServiceConfigurable-mqtt-export has Started"
Timeout = "5s"

[Registry]
Host = "localhost"
Port = 8500
Type = "consul"

# Database is require when Store and Forward is enabled
# Note when running in docker from compose file set the following environment variables:
# - Database_Host: edgex-redis
[Database]
Type = "redisdb"
Host = "localhost"
Port = 6379
Timeout = "30s"

# SecretStore is required when Store and Forward is enabled and running with security
# so Database credentials can be pulled from Vault.
# Note when running in docker from compose file set the following environment variables:
#   - SecretStore_Host: edgex-vault
#   - SecretStore_ServerName: edgex-vault
[SecretStore]
  Host = 'localhost'
  Port = 8200
  Path = '/v1/secret/edgex/appservice/'
  Protocol = 'http'
  RootCaCertPath = ''
  ServerName = ''
  TokenFile = '/vault/config/assets/resp-init.json'
  AdditionalRetryAttempts = 10
  RetryWaitPeriod = "1s"

  [SecretStore.Authentication]
  AuthType = 'X-Vault-Token'

[Clients]
  [Clients.CoreData]
  Protocol = "http"
  Host = "localhost"
  Port = 48080

[Binding]
Type="messagebus"
SubscribeTopic="events"

[MessageBus]
Type = "zero"
    [MessageBus.SubscribeHost]
        Host = "localhost"
        Port = 5563
        Protocol = "tcp"
