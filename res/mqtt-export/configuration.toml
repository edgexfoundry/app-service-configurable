[Writable]
LogLevel = "INFO"

  [Writable.StoreAndForward]
  Enabled = false
  RetryInterval = "5m"
  MaxRetryCount = 10

  [Writable.Pipeline]
  ExecutionOrder = "Transform, MQTTExport"
    [Writable.Pipeline.Functions.FilterByProfileName]
      [Writable.Pipeline.Functions.FilterByProfileName.Parameters]
      ProfileNames = ""
      FilterOut = "false"
    [Writable.Pipeline.Functions.FilterByDeviceName]
      [Writable.Pipeline.Functions.FilterByDeviceName.Parameters]
      DeviceNames = ""
      FilterOut = "false"
    [Writable.Pipeline.Functions.FilterBySourceName]
      [Writable.Pipeline.Functions.FilterBySourceName.Parameters]
      SourceNames = ""
      FilterOut = "false"
    [Writable.Pipeline.Functions.FilterByResourceName]
      [Writable.Pipeline.Functions.FilterByResourceName.Parameters]
      ResourceNames = ""
      FilterOut = "false"
    [Writable.Pipeline.Functions.Transform]
      [Writable.Pipeline.Functions.Transform.Parameters]
      Type = "json"
    [Writable.Pipeline.Functions.Compress]
      [Writable.Pipeline.Functions.Compress.Parameters]
      Algorithm = "gzip"
    [Writable.Pipeline.Functions.Encrypt]
      [Writable.Pipeline.Functions.Encrypt.Parameters]
      Algorithm = "aes" # currently can be only be 'aes'
      Key = "aquqweoruqwpeoruqwpoeruqwpoierupqoweiurpoqwiuerpqowieurqpowieurpoqiweuroipwqure"
      InitVector = "123456789012345678901234567890"
      SecretPath = ""
      SecretName = ""
    [Writable.Pipeline.Functions.Batch]
      [Writable.Pipeline.Functions.Batch.Parameters]
      Mode = "bytimecount" # can be 'bycount', 'bytime' or 'bytimecount'
      BatchThreshold = "30"
      TimeInterval = "60s"
    [Writable.Pipeline.Functions.AddTags]
      [Writable.Pipeline.Functions.AddTags.Parameters]
      Tags=""
    [Writable.Pipeline.Functions.MQTTExport]
      [Writable.Pipeline.Functions.MQTTExport.Parameters]
      BrokerAddress = "tcp://localhost:1883" # Hive Public Test Broker
      # Topic can have place holders in the form '{key-name}' that are replaced with matching Context values. Error occurs if no value match place holder(s).
      Topic = "edgex-export"
      SecretPath = "mqtt"
      ClientId = "MQTT-Export"
      QOS="0"
      AutoReconnect="false"
      KeepAlive = "" # Empty indicates to use default value
      ConnectTimeout = "" # Empty indicates to use default value
      Retain="false"
      SkipVerify = "false"
      AuthMode = "none"
      PersistOnError = "false"

# InsecureSecrets are required for Store and Forward DB access and for authenticated MQTT exports with
# new MQTTSecretSend function when not using security services, i.e. Vault
  [Writable.InsecureSecrets]
    [Writable.InsecureSecrets.DB]
    path = "redisdb"
      [Writable.InsecureSecrets.DB.Secrets]
      username = ""
      password = ""
    [Writable.InsecureSecrets.mqtt]
    path = "mqtt"
      [Writable.InsecureSecrets.mqtt.Secrets]
      username = ""
      password = ""
      cacert = ""
      clientcert = ""
      clientkey = ""

[Service]
HealthCheckInterval = "10s"
Host = "localhost"
Port = 59703
ServerBindAddr = "" # if blank, uses default Go behavior https://golang.org/pkg/net/#Listen
StartupMsg = "app-mqtt-export has Started"
MaxResultCount = 0 # Not curently used by App Services.
MaxRequestSize = 0 # Not curently used by App Services.
RequestTimeout = "5s"

[Registry]
Host = "localhost"
Port = 8500
Type = "consul"

# Database is require when Store and Forward is enabled or when using Redis for the Messagebus
# Note when running in docker from compose file set the following environment variables:
# - Database_Host: edgex-redis
[Database]
Type = "redisdb"
Host = "localhost"
Port = 6379
Timeout = "30s"

# SecretStore is required when Store and Forward is enabled and running with security
# so Database credentials can be pulled from Vault. Also now require when running with secure Consul
# Note when running in docker from compose file set the following environment variables:
#   - SecretStore_Host: edgex-vault
[SecretStore]
Type = 'vault'
Host = 'localhost'
Port = 8200
Path = 'app-mqtt-export/'
Protocol = 'http'
RootCaCertPath = ''
ServerName = ''
TokenFile = '/tmp/edgex/secrets/app-mqtt-export/secrets-token.json'
  [SecretStore.Authentication]
  AuthType = 'X-Vault-Token'

[Clients]
  # Used for version check on start-up
  [Clients.core-metadata]
  Protocol = 'http'
  Host = 'localhost'
  Port = 59881

[Trigger]
Type="edgex-messagebus"
  [Trigger.EdgexMessageBus]
  Type = "redis"
    [Trigger.EdgexMessageBus.SubscribeHost]
    Host = "localhost"
    Port = 6379
    Protocol = "redis"
    SubscribeTopics="edgex/events/#"
    [Trigger.EdgexMessageBus.Optional]
    authmode = 'usernamepassword'  # required for redis messagebus (secure or insecure).
    secretname = 'redisdb'
    # Default MQTT Specific options that need to be here to enable evnironment variable overrides of them
    # Client Identifiers
    ClientId ="app-mqtt-export"
    # Connection information
    Qos          =  "0" # Quality of Sevice values are 0 (At most once), 1 (At least once) or 2 (Exactly once)
    KeepAlive    =  "10" # Seconds (must be 2 or greater)
    Retained     = "false"
    AutoReconnect  = "true"
    ConnectTimeout = "5" # Seconds
    # TLS configuration - Only used if Cert/Key file or Cert/Key PEMblock are specified
    SkipCertVerify = "false"