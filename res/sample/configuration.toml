[Writable]
LogLevel = "INFO"

  [Writable.StoreAndForward]
  Enabled = false
  RetryInterval = "5m"
  MaxRetryCount = 10

  # The Pipeline section allows the functions pipeline to be specified via configuration
  [Writable.Pipeline]
  # If True, the incoming data to the functions pipeline will be []byte, i.e not marshaled to an Event
  # This is useful when the incoming data isn't an EdgeX Event.
  UseTargetTypeOfByteArray = false

  # ExecutionOrder specifies which functions to run and the order to run them.
  # All functions listed must have an entry below in the Pipeline.Functions section
  ExecutionOrder = "FilterByProfileName, FilterByDeviceName, FilterByResourceName, Transform, SetResponseData"

    # The Pipeline.Functions sections define the parameter configuration for each specific function.
    # These function names must match a function defined in the configurable package of the SDK.
    # See the Built-In Transforms/Functions section of the SDK"s README for complete list.
    # Some functions do not require any parameters, but still must be listed.
    # Also, functions not specified in ExecutionOrder above can still be included which allows for easier
    # dynamic changes from Consul.
    [Writable.Pipeline.Functions.FilterByProfileName]
      [Writable.Pipeline.Functions.FilterByProfileName.Parameters]
      # TODO: Remove 'Unknown' once V1 events no longer supported.
      ProfileNames = "Random-Float-Device, Random-Integer-Device, Unknown"
      FilterOut = "false"
    [Writable.Pipeline.Functions.FilterByDeviceName]
      [Writable.Pipeline.Functions.FilterByDeviceName.Parameters]
      DeviceNames = "Random-Float-Device, Random-Integer-Device"
      FilterOut = "false"
    [Writable.Pipeline.Functions.FilterBySourceName]
      [Writable.Pipeline.Functions.FilterBySourceName.Parameters]
      SourceNames = "Bool, BoolArray"
      FilterOut = "false"
    [Writable.Pipeline.Functions.FilterByResourceName]
      [Writable.Pipeline.Functions.FilterByResourceName.Parameters]
      ResourceNames = "Int64, Float64"
      FilterOut = "false"
    [Writable.Pipeline.Functions.AddTags]
      [Writable.Pipeline.Functions.AddTags.Parameters]
      Tags=""
    [Writable.Pipeline.Functions.JSONLogic]
      [Writable.Pipeline.Functions.JSONLogic.Parameters]
      Rule = "{ \"and\" : [{\"<\" : [{ \"var\" : \"temp\" }, 110 ]}, {\"==\" : [{ \"var\" : \"sensor.type\" }, \"temperature\" ]} ] }"
    [Writable.Pipeline.Functions.Transform]
      [Writable.Pipeline.Functions.Transform.Parameters]
      Type = "xml" # can be 'xml' or 'json'
    [Writable.Pipeline.Functions.Compress]
      [Writable.Pipeline.Functions.Compress.Parameters]
      Algorithm = "gzip" # can be 'gzip' or 'zlib'
    [Writable.Pipeline.Functions.Encrypt]
      [Writable.Pipeline.Functions.Encrypt.Parameters]
      Algorithm = "aes" # currently can be only be 'aes'
      Key = "aquqweoruqwpeoruqwpoeruqwpoierupqoweiurpoqwiuerpqowieurqpowieurpoqiweuroipwqure"
      InitVector = "123456789012345678901234567890"
      SecretPath = ""
      SecretName = ""
    [Writable.Pipeline.Functions.Batch]
      [Writable.Pipeline.Functions.Batch.Parameters]
      Mode = "bytimecount" # can be 'bycount', 'bytime' or 'bytimecount'
      BatchThreshold = "30"
      TimeInterval = "60s"
    [Writable.Pipeline.Functions.SetResponseData]
      [Writable.Pipeline.Functions.SetResponseData.Parameters]
      ResponseContentType = "application/xml"
    [Writable.Pipeline.Functions.PushToCore]
      [Writable.Pipeline.Functions.PushToCore.Parameters]
      DeviceName = ""
      ReadingName = ""
    [Writable.Pipeline.Functions.HTTPExport]
      [Writable.Pipeline.Functions.HTTPExport.Parameters]
      Method = "post" # can be 'post' or 'put'
      Url = "http://"
      MimeType = "" #OPTIONAL - defaults to 'application/json' if not set
      PersistOnError = "false"
      HeaderName = "" # Name of the header key to add to the HTTP header
      SecretName = "" # Name of the secret for the header value in the SecretStore
      SecretPath = "" # Path to the secret for the header value in the SecretStore
    [Writable.Pipeline.Functions.MQTTExport]
      [Writable.Pipeline.Functions.MQTTExport.Parameters]
      BrokerAddress = "tcps://localhost:8883"
      Topic = "mytopic"
      SecretPath = "/mqtt"
      ClientId = "myclientid"
      QOS="0"
      AutoreConnect="false"
      Retain="false"
      SkipVerify = "false"
      AuthMode = "none"
      PersistOnError = "false"

# InsecureSecrets are required for Store and Forward DB access and for authenticated HTTP exports and MQTT exports with
# new MQTTSecretSend function when not using security services, i.e. Vault
  [Writable.InsecureSecrets]
    [Writable.InsecureSecrets.DB]
    path = "redisdb"
      [Writable.InsecureSecrets.DB.Secrets]
      username = ""
      password = ""
    [Writable.InsecureSecrets.http]
    path = "http"
      [Writable.InsecureSecrets.http.Secrets]
      headervalue = "<put your value here>"
    [Writable.InsecureSecrets.mqtt]
    path = "mqtt"
      [Writable.InsecureSecrets.mqtt.Secrets]
      username = ""
      password = ""
      cacert = ""
      clientcert = ""
      clientkey = ""
    [Writable.InsecureSecrets.AES]
    path = "aes"
      [Writable.InsecureSecrets.AES.Secrets]
      key = "aquqweoruqwpeoruqwpoeruqwpoierupqoweiurpoqwiuerpqowieurqpowieurpoqiweuroipwqure"

[Service]
HealthCheckInterval = "10s"
Host = "localhost"
Port = 59700
ServerBindAddr = "" # if blank, uses default Go behavior https://golang.org/pkg/net/#Listen
StartupMsg = "app-sample has Started"
MaxResultCount = 0 # Not curently used by App Services.
MaxRequestSize = 0 # Not curently used by App Services.
RequestTimeout = "5s"

[Registry]
Host = "localhost"
Port = 8500
Type = "consul"

# Database is require when Store and Forward is enabled or when using Redis for the Messagebus
# Note when running in docker from compose file set the following environment variables:
# - Database_Host: edgex-redis
[Database]
Type = "redisdb"
Host = "localhost"
Port = 6379
Timeout = "30s"

# SecretStore is required when Store and Forward is enabled and running with security
# so Database credentials can be pulled from Vault. Also now require when running with secure Consul
# Note when running in docker from compose file set the following environment variables:
#   - SecretStore_Host: edgex-vault
[SecretStore]
Type = 'vault'
Host = 'localhost'
Port = 8200
Path = '/v1/secret/edgex/app-sample/'
Protocol = 'http'
RootCaCertPath = ''
ServerName = ''
TokenFile = '/tmp/edgex/secrets/app-sample/secrets-token.json'
AdditionalRetryAttempts = 10
RetryWaitPeriod = "1s"
  [SecretStore.Authentication]
  AuthType = 'X-Vault-Token'

[Clients]
  [Clients.core-data]
  Protocol = "http"
  Host = "localhost"
  Port = 59880

[Trigger]
Type="edgex-messagebus"
  [Trigger.EdgexMessageBus]
  Type = "redis"
    [Trigger.EdgexMessageBus.SubscribeHost]
    Host = "localhost"
    Port = 6379
    Protocol = "redis"
    SubscribeTopics="edgex/events/#"
    [Trigger.EdgexMessageBus.PublishHost]
    Host = "localhost"
    Port = 6379
    Protocol = "redis"
    PublishTopic="example"
    [Trigger.EdgexMessageBus.Optional]
    authmode = 'usernamepassword'  # required for redis messagebus (secure or insecure).
    secretname = 'redisdb'
