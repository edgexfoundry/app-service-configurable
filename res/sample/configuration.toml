[Writable]
  LogLevel = "INFO"

  [Writable.StoreAndForward]
    Enabled = false
    RetryInterval = "5m"
    MaxRetryCount = 10

  # The Pipeline section allows the functions pipeline to be specified via configuration
  [Writable.Pipeline]
    # If True, the incoming data to the functions pipeline will be []byte, i.e not marshaled to an Event
    # This is useful when the incoming data isn't an EdgeX Event.
    UseTargetTypeOfByteArray = false

    # ExecutionOrder specifies which functions to run and the order to run them.
    # All functions listed must have an entry below in the Pipeline.Functions section
    ExecutionOrder = "FilterByDeviceName, TransformToXML, SetOutputData"

    # The Pipeline.Functions sections define the parameter configuration for each specific function.
    # These function names must match a function defined in the configurable package of the SDK.
    # See the Built-In Transforms/Functions section of the SDK"s README for complete list.
    # Some functions do not require any parameters, but still must be listed.
    # Also, functions not specified in ExecutionOrder above can still be included which allows for easier
    # dynamic changes from Consul.
    [Writable.Pipeline.Functions.FilterByDeviceName]
      [Writable.Pipeline.Functions.FilterByDeviceName.Parameters]
        DeviceNames = "Random-Float-Device,Random-Integer-Device"
        FilterOut = "false"
    [Writable.Pipeline.Functions.FilterByValueDescriptor]
      [Writable.Pipeline.Functions.FilterByValueDescriptor.Parameters]
        ValueDescriptors = "RandomValue_Int8, RandomValue_Int64"
        FilterOut = "false"
    [Writable.Pipeline.Functions.AddTags]
      [Writable.Pipeline.Functions.AddTags.Parameters]
        tags=""
    [Writable.Pipeline.Functions.JSONLogic]
      [Writable.Pipeline.Functions.JSONLogic.Parameters]
        rule = "{ \"and\" : [{\"<\" : [{ \"var\" : \"temp\" }, 110 ]}, {\"==\" : [{ \"var\" : \"sensor.type\" }, \"temperature\" ]} ] }"
    [Writable.Pipeline.Functions.TransformToXML]
    [Writable.Pipeline.Functions.TransformToJSON]
    [Writable.Pipeline.Functions.CompressWithGZIP]
    [Writable.Pipeline.Functions.CompressWithZLIB]
    [Writable.Pipeline.Functions.EncryptWithAES]
      [Writable.Pipeline.Functions.EncryptWithAES.Parameters]
        Key = "aquqweoruqwpeoruqwpoeruqwpoierupqoweiurpoqwiuerpqowieurqpowieurpoqiweuroipwqure"
        InitVector = "123456789012345678901234567890"
    [Writable.Pipeline.Functions.Batch]
      [Writable.Pipeline.Functions.Batch.Parameters]
    [Writable.Pipeline.Functions.BatchByCount]
      [Writable.Pipeline.Functions.BatchByCount.Parameters]
      batchthreshold = "30"
    [Writable.Pipeline.Functions.BatchByTime]
      [Writable.Pipeline.Functions.BatchByTime.Parameters]
      timeinterval = "60s"
    [Writable.Pipeline.Functions.BatchByTimeAndCount]
      [Writable.Pipeline.Functions.BatchByTimeAndCount.Parameters]
      batchthreshold = "30"
      timeinterval = "60s"
    [Writable.Pipeline.Functions.SetOutputData]
      [Writable.Pipeline.Functions.SetOutputData.Parameters]
        ResponseContentType = ""
    [Writable.Pipeline.Functions.MarkAsPushed]
    [Writable.Pipeline.Functions.PushToCore]
      [Writable.Pipeline.Functions.PushToCore.Parameters]
        DeviceName = ""
        ReadingName = ""
    [Writable.Pipeline.Functions.HTTPPost]
      [Writable.Pipeline.Functions.HTTPPost.Parameters]
        url = "http://"
        mimeType = "" #OPTIONAL - default application/json
        persistOnError = "false"
        secretheadername = "" # This is the name used in the HTTP header and also used as the secret key
        secretpath = ""
    [Writable.Pipeline.Functions.HTTPPostJSON]
      [Writable.Pipeline.Functions.HTTPPostJSON.Parameters]
        url = "http://"
        persistOnError = "false"
        secretheadername = "" # This is the name used in the HTTP header and also used as the secret key
        secretpath = ""
    [Writable.Pipeline.Functions.HTTPPostXML]
      [Writable.Pipeline.Functions.HTTPPostXML.Parameters]
        url = "http://"
        persistOnError = "false"
        secretheadername = "" # This is the name used in the HTTP header and also used as the secret key
        secretpath = ""
    [Writable.Pipeline.Functions.HTTPPut]
      [Writable.Pipeline.Functions.HTTPPut.Parameters]
        url = "http://"
        mimeType = "" #OPTIONAL - default application/json
        persistOnError = "false"
        secretheadername = "" # This is the name used in the HTTP header and also used as the secret key
        secretpath = ""
    [Writable.Pipeline.Functions.HTTPPutJSON]
      [Writable.Pipeline.Functions.HTTPPutJSON.Parameters]
        url = "http://"
        persistOnError = "false"
        secretheadername = "" # This is the name used in the HTTP header and also used as the secret key
        secretpath = ""
    [Writable.Pipeline.Functions.HTTPPutXML]
      [Writable.Pipeline.Functions.HTTPPutXML.Parameters]
        url = "http://"
        persistOnError = "false"
        secretheadername = "" # This is the name used in the HTTP header and also used as the secret key
        secretpath = ""
    [Writable.Pipeline.Functions.MQTTSecretSend]
      [Writable.Pipeline.Functions.MQTTSecretSend.Parameters]
        brokeraddress = "tcps://localhost:8883"
        topic = "mytopic"
        secretpath = "/mqtt"
        clientid = "myclientid"
        qos="0"
        autoreconnect="false"
        retain="false"
        skipverify = "false"
        authmode = "none"
        persistOnError = "false"

# InsecureSecrets are required for Store and Forward DB access and for authenticated HTTP exports and MQTT exports with
# new MQTTSecretSend function when not using security services, i.e. Vault
  [Writable.InsecureSecrets]
    [Writable.InsecureSecrets.DB]
        path = "redisdb"
        [Writable.InsecureSecrets.DB.Secrets]
            username = ""
            password = ""
    [Writable.InsecureSecrets.http]
        path = "http"
        [Writable.InsecureSecrets.http.Secrets]
            yoursecretheadername = "" # Note the key name and value are your custom values.
    [Writable.InsecureSecrets.mqtt]
        path = "mqtt"
        [Writable.InsecureSecrets.mqtt.Secrets]
            username = ""
            password = ""
            cacert = ""
            clientcert = ""
            clientkey = ""

[Service]
BootTimeout = "30s"
CheckInterval = "10s"
Host = "localhost"
ServerBindAddr = "" # if blank, uses default Go behavior https://golang.org/pkg/net/#Listen
Port = 48095
Protocol = "http"
ReadMaxLimit = 100
StartupMsg = "Sample Configurable Application Service Started"
Timeout = "5s"

[Registry]
Host = "localhost"
Port = 8500
Type = "consul"

# Database is require when Store and Forward is enabled
[Database]
Type = "redisdb"
Host = "localhost"
Port = 6379
Timeout = "30s"

# SecretStore is required when Store and Forward is enabled and running with security
# so Database credentials can be pulled from Vault.
# Note when running in docker from compose file set the following environment variables:
#   - SecretStore_Host: edgex-vault
#   - SecretStore_ServerName: edgex-vault
[SecretStore]
  Host = 'localhost'
  Port = 8200
  Path = '/v1/secret/edgex/appservice/'
  Protocol = 'http'
  RootCaCertPath = ''
  ServerName = ''
  TokenFile = '/vault/config/assets/resp-init.json'
  AdditionalRetryAttempts = 10
  RetryWaitPeriod = "1s"

  [SecretStore.Authentication]
  AuthType = 'X-Vault-Token'

[Clients]
  [Clients.CoreData]
  Protocol = "http"
  Host = "localhost"
  Port = 48080

[Binding]
Type="messagebus"
SubscribeTopic="events"
PublishTopic="example"

[MessageBus]
Type = "zero"
    [MessageBus.SubscribeHost]
        Host = "localhost"
        Port = 5563
        Protocol = "tcp"
    [MessageBus.PublishHost]
        Host = "*"
        Port = 5565
        Protocol = "tcp"
