[Writable]
  LogLevel = "INFO"

  [Writable.StoreAndForward]
  Enabled = false
  RetryInterval = "5m"
  MaxRetryCount = 10

  [Writable.Pipeline]
    UseTargetTypeOfByteArray = false
    ExecutionOrder = "FilterByDeviceName, TransformToJSON, HTTPPostJSON"
      [Writable.Pipeline.Functions.TransformToXML]
        [Writable.Pipeline.Functions.TransformToXML.Parameters]
        NoOp = "" # Must have at least one parameter for function to be populated in Consul
      [Writable.Pipeline.Functions.TransformToJSON]
        [Writable.Pipeline.Functions.TransformToJSON.Parameters]
        NoOp = "" # Must have at least one parameter for function to be populated in Consul
      [Writable.Pipeline.Functions.CompressWithGZIP]
        [Writable.Pipeline.Functions.CompressWithGZIP.Parameters]
        NoOp = "" # Must have at least one parameter for function to be populated in Consul
      [Writable.Pipeline.Functions.CompressWithZLIB]
        [Writable.Pipeline.Functions.CompressWithZLIB.Parameters]
        NoOp = "" # Must have at least one parameter for function to be populated in Consul
      [Writable.Pipeline.Functions.FilterByProfileName]
        [Writable.Pipeline.Functions.FilterByProfileName.Parameters]
        ProfileNames = ""
        FilterOut = "false"
      [Writable.Pipeline.Functions.FilterByDeviceName]
        [Writable.Pipeline.Functions.FilterByDeviceName.Parameters]
        DeviceNames = ""
        FilterOut = "false"
      [Writable.Pipeline.Functions.FilterByResourceName]
        [Writable.Pipeline.Functions.FilterByResourceName.Parameters]
        ResourceNames = ""
        FilterOut = "false"
      [Writable.Pipeline.Functions.HTTPPostJSON]
        [Writable.Pipeline.Functions.HTTPPostJSON.Parameters]
        url = "https://f095cfcd-a3f6-4885-85ea-7157c6afd17e.mock.pstmn.io" # Postman mock service
        persistOnError = "false"
        headername = "" # Name of the header key to add to the HTTP header
        secretname = "" # Name of the secret for the header value in the SecretStore
        secretpath = "" # Path to the secret for the header value in the SecretStore
      [Writable.Pipeline.Functions.HTTPPutJSON]
        [Writable.Pipeline.Functions.HTTPPutJSON.Parameters]
        url = "https://f095cfcd-a3f6-4885-85ea-7157c6afd17e.mock.pstmn.io" # Postman mock service
        persistOnError = "false"
        headername = "" # Name of the header key to add to the HTTP header
        secretname = "" # Name of the secret for the header value in the SecretStore
        secretpath = "" # Path to the secret for the header value in the SecretStore
      [Writable.Pipeline.Functions.HTTPPostXML]
        [Writable.Pipeline.Functions.HTTPPostXML.Parameters]
        url = "https://f095cfcd-a3f6-4885-85ea-7157c6afd17e.mock.pstmn.io" # Postman mock service
        persistOnError = "false"
        headername = "" # Name of the header key to add to the HTTP header
        secretname = "" # Name of the secret for the header value in the SecretStore
        secretpath = "" # Path to the secret for the header value in the SecretStore
      [Writable.Pipeline.Functions.HTTPPutXML]
        [Writable.Pipeline.Functions.HTTPPutXML.Parameters]
        url = "https://f095cfcd-a3f6-4885-85ea-7157c6afd17e.mock.pstmn.io" # Postman mock service
        persistOnError = "false"
        headername = "" # Name of the header key to add to the HTTP header
        secretname = "" # Name of the secret for the header value in the SecretStore
        secretpath = "" # Path to the secret for the header value in the SecretStore
      [Writable.Pipeline.Functions.AddTags]
        [Writable.Pipeline.Functions.AddTags.Parameters]
        tags=""

# InsecureSecrets are required for Store and Forward DB access and for authenticated HTTP exports when not using
# security services, i.e. Vault
  [Writable.InsecureSecrets]
    [Writable.InsecureSecrets.DB]
    path = "redisdb"
      [Writable.InsecureSecrets.DB.Secrets]
      username = ""
      password = ""
    [Writable.InsecureSecrets.http]
    path = "http"
      [Writable.InsecureSecrets.http.Secrets]
      headervalue = "<put your value here>"

[Service]
BootTimeout = "30s"
CheckInterval = "10s"
Host = "localhost"
ServerBindAddr = "" # if blank, uses default Go behavior https://golang.org/pkg/net/#Listen
Port = 50003
Protocol = "http"
ReadMaxLimit = 100
StartupMsg = "AppServiceConfigurable-http-export has Started"
Timeout = "5s"

[Registry]
Host = "localhost"
Port = 8500
Type = "consul"

# Database is require when Store and Forward is enabled
# Note when running in docker from compose file set the following environment variables:
# - Database_Host: edgex-redis
[Database]
Type = "redisdb"
Host = "localhost"
Port = 6379
Timeout = "30s"

# SecretStore is required when Store and Forward is enabled and running with security
# so Database credentials can be pulled from Vault.
# Note when running in docker from compose file set the following environment variables:
#   - SecretStore_Host: edgex-vault
[SecretStore]
Type = 'vault'
Host = 'localhost'
Port = 8200
Path = '/v1/secret/edgex/app-service-http-export/'
Protocol = 'http'
RootCaCertPath = ''
ServerName = ''
TokenFile = '/tmp/edgex/secrets/app-service-http-export/secrets-token.json'
AdditionalRetryAttempts = 10
RetryWaitPeriod = "1s"
  [SecretStore.Authentication]
  AuthType = 'X-Vault-Token'

[Clients]
  [Clients.CoreData]
  Protocol = "http"
  Host = "localhost"
  Port = 48080

[Trigger]
Type="edgex-messagebus"
SubscribeTopics="events, edgex/events"
  [Trigger.EdgexMessageBus]
  Type = "zero"
    [Trigger.EdgexMessageBus.SubscribeHost]
    Host = "localhost"
    Port = 5563
    Protocol = "tcp"
